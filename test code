# class labels and names
classes = range(0, 10)
names = ['airplane',
        'automobile',
        'bird',
        'cat',
        'deer',
        'dog',
        'frog',
        'horse',
        'ship',
        'truck']
classLabels = dict(zip(classes, names))
print(classLabels)

# set the range of 9 images from test data set
# position of first image
testImagePos = 500
testImages = x_test[testImagePos:testImagePos+9]
actualLabels = np.argmax(y_test[testImagePos:testImagePos+9], axis=-1)

# make predictions
predictions = model.predict(testImages)
predictions = np.argmax(predictions, axis=-1)

# create sbplots using matplotlib.pyplot and 
# populate the plots with data
fig, axs = plt.subplots(5, 5, figsize=(10, 10))
fig.subplots_adjust(hspace=1)
axs = axs.flatten()

for i, img in enumerate(testImages):
    
    # set the title with predicted and actual label
    for key, value in actualLabels:
        if predictions[i] == key:
            title = 'Predicted Class: {} \nActual Class {}'.format(predictions[key], actualLabels[Labels[i]])
            axs[i].set_title(title)
            axs.axes.get_xaxes().set_visible(False)
            axs.axes.get_yaxes().set_visible(False)
    # plot the image        
    axs[i].imshow(img)
# show the image    
plt.show 
